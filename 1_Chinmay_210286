{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Submit_Kaggle_Spaceship_Titanic",
      "provenance": [],
      "collapsed_sections": [
        "DuftIlMPcynX",
        "O8m82HzgsIgI",
        "Wjy7cRgl4rT-",
        "ydRz8bi6bV8S",
        "FtgprIiNfxsm",
        "wZfmN64q9U9-",
        "qtTlkhSC2J33"
      ]
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "8MWxJ-TfkK2W"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import tensorflow as tf"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Processing Data"
      ],
      "metadata": {
        "id": "DuftIlMPcynX"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df=pd.read_csv('train.csv')\n",
        "\n",
        "df.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "YZ6Qrdy6kY7S",
        "outputId": "c57c6fcd-8c5e-4297-a8e4-e3ab2d6ca0fb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "               Age   RoomService     FoodCourt  ShoppingMall           Spa  \\\n",
              "count  8514.000000   8512.000000   8510.000000   8485.000000   8510.000000   \n",
              "mean     28.827930    224.687617    458.077203    173.729169    311.138778   \n",
              "std      14.489021    666.717663   1611.489240    604.696458   1136.705535   \n",
              "min       0.000000      0.000000      0.000000      0.000000      0.000000   \n",
              "25%      19.000000      0.000000      0.000000      0.000000      0.000000   \n",
              "50%      27.000000      0.000000      0.000000      0.000000      0.000000   \n",
              "75%      38.000000     47.000000     76.000000     27.000000     59.000000   \n",
              "max      79.000000  14327.000000  29813.000000  23492.000000  22408.000000   \n",
              "\n",
              "             VRDeck  \n",
              "count   8505.000000  \n",
              "mean     304.854791  \n",
              "std     1145.717189  \n",
              "min        0.000000  \n",
              "25%        0.000000  \n",
              "50%        0.000000  \n",
              "75%       46.000000  \n",
              "max    24133.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-42a84c55-aa26-4f33-91bb-4465c3104771\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Age</th>\n",
              "      <th>RoomService</th>\n",
              "      <th>FoodCourt</th>\n",
              "      <th>ShoppingMall</th>\n",
              "      <th>Spa</th>\n",
              "      <th>VRDeck</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>8514.000000</td>\n",
              "      <td>8512.000000</td>\n",
              "      <td>8510.000000</td>\n",
              "      <td>8485.000000</td>\n",
              "      <td>8510.000000</td>\n",
              "      <td>8505.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>28.827930</td>\n",
              "      <td>224.687617</td>\n",
              "      <td>458.077203</td>\n",
              "      <td>173.729169</td>\n",
              "      <td>311.138778</td>\n",
              "      <td>304.854791</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>14.489021</td>\n",
              "      <td>666.717663</td>\n",
              "      <td>1611.489240</td>\n",
              "      <td>604.696458</td>\n",
              "      <td>1136.705535</td>\n",
              "      <td>1145.717189</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>19.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>27.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>38.000000</td>\n",
              "      <td>47.000000</td>\n",
              "      <td>76.000000</td>\n",
              "      <td>27.000000</td>\n",
              "      <td>59.000000</td>\n",
              "      <td>46.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>79.000000</td>\n",
              "      <td>14327.000000</td>\n",
              "      <td>29813.000000</td>\n",
              "      <td>23492.000000</td>\n",
              "      <td>22408.000000</td>\n",
              "      <td>24133.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-42a84c55-aa26-4f33-91bb-4465c3104771')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-42a84c55-aa26-4f33-91bb-4465c3104771 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-42a84c55-aa26-4f33-91bb-4465c3104771');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7lr2bwKmmAYK",
        "outputId": "1db7b307-d042-4d87-9957-604d85caa7a0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['PassengerId', 'HomePlanet', 'CryoSleep', 'Cabin', 'Destination', 'Age',\n",
              "       'VIP', 'RoomService', 'FoodCourt', 'ShoppingMall', 'Spa', 'VRDeck',\n",
              "       'Name', 'Transported'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Va4GuunbN4_L",
        "outputId": "837bdd24-c0ad-47f0-d495-29e15792c6e2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(8693, 14)"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['spend']=df['RoomService']++df['FoodCourt']+df['ShoppingMall']+df['Spa']+df['VRDeck']"
      ],
      "metadata": {
        "id": "D1fs5uEGmEcZ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "TztqKPABKdIO",
        "outputId": "25aa7a30-e986-4e6f-f6d3-407bca8714df"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  PassengerId HomePlanet CryoSleep  Cabin  Destination   Age    VIP  \\\n",
              "0     0001_01     Europa     False  B/0/P  TRAPPIST-1e  39.0  False   \n",
              "1     0002_01      Earth     False  F/0/S  TRAPPIST-1e  24.0  False   \n",
              "2     0003_01     Europa     False  A/0/S  TRAPPIST-1e  58.0   True   \n",
              "3     0003_02     Europa     False  A/0/S  TRAPPIST-1e  33.0  False   \n",
              "4     0004_01      Earth     False  F/1/S  TRAPPIST-1e  16.0  False   \n",
              "\n",
              "   RoomService  FoodCourt  ShoppingMall     Spa  VRDeck               Name  \\\n",
              "0          0.0        0.0           0.0     0.0     0.0    Maham Ofracculy   \n",
              "1        109.0        9.0          25.0   549.0    44.0       Juanna Vines   \n",
              "2         43.0     3576.0           0.0  6715.0    49.0      Altark Susent   \n",
              "3          0.0     1283.0         371.0  3329.0   193.0       Solam Susent   \n",
              "4        303.0       70.0         151.0   565.0     2.0  Willy Santantines   \n",
              "\n",
              "   Transported    spend  \n",
              "0        False      0.0  \n",
              "1         True    736.0  \n",
              "2        False  10383.0  \n",
              "3        False   5176.0  \n",
              "4         True   1091.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f85ed57e-521c-441b-9dc6-270fb15aaaa9\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>HomePlanet</th>\n",
              "      <th>CryoSleep</th>\n",
              "      <th>Cabin</th>\n",
              "      <th>Destination</th>\n",
              "      <th>Age</th>\n",
              "      <th>VIP</th>\n",
              "      <th>RoomService</th>\n",
              "      <th>FoodCourt</th>\n",
              "      <th>ShoppingMall</th>\n",
              "      <th>Spa</th>\n",
              "      <th>VRDeck</th>\n",
              "      <th>Name</th>\n",
              "      <th>Transported</th>\n",
              "      <th>spend</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0001_01</td>\n",
              "      <td>Europa</td>\n",
              "      <td>False</td>\n",
              "      <td>B/0/P</td>\n",
              "      <td>TRAPPIST-1e</td>\n",
              "      <td>39.0</td>\n",
              "      <td>False</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>Maham Ofracculy</td>\n",
              "      <td>False</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0002_01</td>\n",
              "      <td>Earth</td>\n",
              "      <td>False</td>\n",
              "      <td>F/0/S</td>\n",
              "      <td>TRAPPIST-1e</td>\n",
              "      <td>24.0</td>\n",
              "      <td>False</td>\n",
              "      <td>109.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>25.0</td>\n",
              "      <td>549.0</td>\n",
              "      <td>44.0</td>\n",
              "      <td>Juanna Vines</td>\n",
              "      <td>True</td>\n",
              "      <td>736.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0003_01</td>\n",
              "      <td>Europa</td>\n",
              "      <td>False</td>\n",
              "      <td>A/0/S</td>\n",
              "      <td>TRAPPIST-1e</td>\n",
              "      <td>58.0</td>\n",
              "      <td>True</td>\n",
              "      <td>43.0</td>\n",
              "      <td>3576.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>6715.0</td>\n",
              "      <td>49.0</td>\n",
              "      <td>Altark Susent</td>\n",
              "      <td>False</td>\n",
              "      <td>10383.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0003_02</td>\n",
              "      <td>Europa</td>\n",
              "      <td>False</td>\n",
              "      <td>A/0/S</td>\n",
              "      <td>TRAPPIST-1e</td>\n",
              "      <td>33.0</td>\n",
              "      <td>False</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1283.0</td>\n",
              "      <td>371.0</td>\n",
              "      <td>3329.0</td>\n",
              "      <td>193.0</td>\n",
              "      <td>Solam Susent</td>\n",
              "      <td>False</td>\n",
              "      <td>5176.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0004_01</td>\n",
              "      <td>Earth</td>\n",
              "      <td>False</td>\n",
              "      <td>F/1/S</td>\n",
              "      <td>TRAPPIST-1e</td>\n",
              "      <td>16.0</td>\n",
              "      <td>False</td>\n",
              "      <td>303.0</td>\n",
              "      <td>70.0</td>\n",
              "      <td>151.0</td>\n",
              "      <td>565.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Willy Santantines</td>\n",
              "      <td>True</td>\n",
              "      <td>1091.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f85ed57e-521c-441b-9dc6-270fb15aaaa9')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-f85ed57e-521c-441b-9dc6-270fb15aaaa9 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-f85ed57e-521c-441b-9dc6-270fb15aaaa9');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "type(df.Cabin[1])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9ApQLx0QLNPC",
        "outputId": "bec4f46e-3056-4b73-b801-0e1e48b2cc2d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "str"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.dropna(inplace=True)"
      ],
      "metadata": {
        "id": "fFABN_XMNnxG"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df['Cabin'].isnull().values.any()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sjXFvO5fPB8u",
        "outputId": "242a8c2f-810b-4615-c51b-6c0641bd2ab5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "False"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "X52Ut02JQg-E",
        "outputId": "911f2982-1204-4cb4-b276-229b9ed85e57"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(6606, 15)"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(df['Cabin'].str.len())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hLIX-yjnzOAO",
        "outputId": "38bc94d5-ef42-4e95-d007-c9a7cc8fe0ee"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0       5\n",
            "1       5\n",
            "2       5\n",
            "3       5\n",
            "4       5\n",
            "       ..\n",
            "8688    6\n",
            "8689    8\n",
            "8690    8\n",
            "8691    7\n",
            "8692    7\n",
            "Name: Cabin, Length: 6606, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['Deck'] = df['Cabin'].str[0]"
      ],
      "metadata": {
        "id": "uMKarVCqKe5p"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.head()\n",
        "#df.drop(columns=['Num','Side'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "0EKf-cEaL2-V",
        "outputId": "441a5955-082e-425a-e7e3-6120ee8a84e2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  PassengerId HomePlanet CryoSleep  Cabin  Destination   Age    VIP  \\\n",
              "0     0001_01     Europa     False  B/0/P  TRAPPIST-1e  39.0  False   \n",
              "1     0002_01      Earth     False  F/0/S  TRAPPIST-1e  24.0  False   \n",
              "2     0003_01     Europa     False  A/0/S  TRAPPIST-1e  58.0   True   \n",
              "3     0003_02     Europa     False  A/0/S  TRAPPIST-1e  33.0  False   \n",
              "4     0004_01      Earth     False  F/1/S  TRAPPIST-1e  16.0  False   \n",
              "\n",
              "   RoomService  FoodCourt  ShoppingMall     Spa  VRDeck               Name  \\\n",
              "0          0.0        0.0           0.0     0.0     0.0    Maham Ofracculy   \n",
              "1        109.0        9.0          25.0   549.0    44.0       Juanna Vines   \n",
              "2         43.0     3576.0           0.0  6715.0    49.0      Altark Susent   \n",
              "3          0.0     1283.0         371.0  3329.0   193.0       Solam Susent   \n",
              "4        303.0       70.0         151.0   565.0     2.0  Willy Santantines   \n",
              "\n",
              "   Transported    spend Deck  \n",
              "0        False      0.0    B  \n",
              "1         True    736.0    F  \n",
              "2        False  10383.0    A  \n",
              "3        False   5176.0    A  \n",
              "4         True   1091.0    F  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b4d04919-3dd8-47ec-b59d-993fbe1937a9\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>HomePlanet</th>\n",
              "      <th>CryoSleep</th>\n",
              "      <th>Cabin</th>\n",
              "      <th>Destination</th>\n",
              "      <th>Age</th>\n",
              "      <th>VIP</th>\n",
              "      <th>RoomService</th>\n",
              "      <th>FoodCourt</th>\n",
              "      <th>ShoppingMall</th>\n",
              "      <th>Spa</th>\n",
              "      <th>VRDeck</th>\n",
              "      <th>Name</th>\n",
              "      <th>Transported</th>\n",
              "      <th>spend</th>\n",
              "      <th>Deck</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0001_01</td>\n",
              "      <td>Europa</td>\n",
              "      <td>False</td>\n",
              "      <td>B/0/P</td>\n",
              "      <td>TRAPPIST-1e</td>\n",
              "      <td>39.0</td>\n",
              "      <td>False</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>Maham Ofracculy</td>\n",
              "      <td>False</td>\n",
              "      <td>0.0</td>\n",
              "      <td>B</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0002_01</td>\n",
              "      <td>Earth</td>\n",
              "      <td>False</td>\n",
              "      <td>F/0/S</td>\n",
              "      <td>TRAPPIST-1e</td>\n",
              "      <td>24.0</td>\n",
              "      <td>False</td>\n",
              "      <td>109.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>25.0</td>\n",
              "      <td>549.0</td>\n",
              "      <td>44.0</td>\n",
              "      <td>Juanna Vines</td>\n",
              "      <td>True</td>\n",
              "      <td>736.0</td>\n",
              "      <td>F</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0003_01</td>\n",
              "      <td>Europa</td>\n",
              "      <td>False</td>\n",
              "      <td>A/0/S</td>\n",
              "      <td>TRAPPIST-1e</td>\n",
              "      <td>58.0</td>\n",
              "      <td>True</td>\n",
              "      <td>43.0</td>\n",
              "      <td>3576.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>6715.0</td>\n",
              "      <td>49.0</td>\n",
              "      <td>Altark Susent</td>\n",
              "      <td>False</td>\n",
              "      <td>10383.0</td>\n",
              "      <td>A</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0003_02</td>\n",
              "      <td>Europa</td>\n",
              "      <td>False</td>\n",
              "      <td>A/0/S</td>\n",
              "      <td>TRAPPIST-1e</td>\n",
              "      <td>33.0</td>\n",
              "      <td>False</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1283.0</td>\n",
              "      <td>371.0</td>\n",
              "      <td>3329.0</td>\n",
              "      <td>193.0</td>\n",
              "      <td>Solam Susent</td>\n",
              "      <td>False</td>\n",
              "      <td>5176.0</td>\n",
              "      <td>A</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0004_01</td>\n",
              "      <td>Earth</td>\n",
              "      <td>False</td>\n",
              "      <td>F/1/S</td>\n",
              "      <td>TRAPPIST-1e</td>\n",
              "      <td>16.0</td>\n",
              "      <td>False</td>\n",
              "      <td>303.0</td>\n",
              "      <td>70.0</td>\n",
              "      <td>151.0</td>\n",
              "      <td>565.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Willy Santantines</td>\n",
              "      <td>True</td>\n",
              "      <td>1091.0</td>\n",
              "      <td>F</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b4d04919-3dd8-47ec-b59d-993fbe1937a9')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-b4d04919-3dd8-47ec-b59d-993fbe1937a9 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-b4d04919-3dd8-47ec-b59d-993fbe1937a9');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.dtypes"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NXKBq4nA1qwU",
        "outputId": "3d18e969-bf6d-4005-f56c-fe5741837492"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "PassengerId      object\n",
              "HomePlanet       object\n",
              "CryoSleep        object\n",
              "Cabin            object\n",
              "Destination      object\n",
              "Age             float64\n",
              "VIP              object\n",
              "RoomService     float64\n",
              "FoodCourt       float64\n",
              "ShoppingMall    float64\n",
              "Spa             float64\n",
              "VRDeck          float64\n",
              "Name             object\n",
              "Transported        bool\n",
              "spend           float64\n",
              "Deck             object\n",
              "dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['CryoSleep']=df['CryoSleep'].astype('category')\n",
        "df['VIP']=df['VIP'].astype('category')\n",
        "\n",
        "df['SVal']=df['CryoSleep'].cat.codes\n",
        "df['VVal']=df['VIP'].cat.codes\n",
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "tHgtb2Bh2S6z",
        "outputId": "8b83db30-622b-4195-94c4-4ed9acf27878"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  PassengerId HomePlanet CryoSleep  Cabin  Destination   Age    VIP  \\\n",
              "0     0001_01     Europa     False  B/0/P  TRAPPIST-1e  39.0  False   \n",
              "1     0002_01      Earth     False  F/0/S  TRAPPIST-1e  24.0  False   \n",
              "2     0003_01     Europa     False  A/0/S  TRAPPIST-1e  58.0   True   \n",
              "3     0003_02     Europa     False  A/0/S  TRAPPIST-1e  33.0  False   \n",
              "4     0004_01      Earth     False  F/1/S  TRAPPIST-1e  16.0  False   \n",
              "\n",
              "   RoomService  FoodCourt  ShoppingMall     Spa  VRDeck               Name  \\\n",
              "0          0.0        0.0           0.0     0.0     0.0    Maham Ofracculy   \n",
              "1        109.0        9.0          25.0   549.0    44.0       Juanna Vines   \n",
              "2         43.0     3576.0           0.0  6715.0    49.0      Altark Susent   \n",
              "3          0.0     1283.0         371.0  3329.0   193.0       Solam Susent   \n",
              "4        303.0       70.0         151.0   565.0     2.0  Willy Santantines   \n",
              "\n",
              "   Transported    spend Deck  SVal  VVal  \n",
              "0        False      0.0    B     0     0  \n",
              "1         True    736.0    F     0     0  \n",
              "2        False  10383.0    A     0     1  \n",
              "3        False   5176.0    A     0     0  \n",
              "4         True   1091.0    F     0     0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d599f3c6-a71f-4e32-9490-6ebef14d1931\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>HomePlanet</th>\n",
              "      <th>CryoSleep</th>\n",
              "      <th>Cabin</th>\n",
              "      <th>Destination</th>\n",
              "      <th>Age</th>\n",
              "      <th>VIP</th>\n",
              "      <th>RoomService</th>\n",
              "      <th>FoodCourt</th>\n",
              "      <th>ShoppingMall</th>\n",
              "      <th>Spa</th>\n",
              "      <th>VRDeck</th>\n",
              "      <th>Name</th>\n",
              "      <th>Transported</th>\n",
              "      <th>spend</th>\n",
              "      <th>Deck</th>\n",
              "      <th>SVal</th>\n",
              "      <th>VVal</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0001_01</td>\n",
              "      <td>Europa</td>\n",
              "      <td>False</td>\n",
              "      <td>B/0/P</td>\n",
              "      <td>TRAPPIST-1e</td>\n",
              "      <td>39.0</td>\n",
              "      <td>False</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>Maham Ofracculy</td>\n",
              "      <td>False</td>\n",
              "      <td>0.0</td>\n",
              "      <td>B</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0002_01</td>\n",
              "      <td>Earth</td>\n",
              "      <td>False</td>\n",
              "      <td>F/0/S</td>\n",
              "      <td>TRAPPIST-1e</td>\n",
              "      <td>24.0</td>\n",
              "      <td>False</td>\n",
              "      <td>109.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>25.0</td>\n",
              "      <td>549.0</td>\n",
              "      <td>44.0</td>\n",
              "      <td>Juanna Vines</td>\n",
              "      <td>True</td>\n",
              "      <td>736.0</td>\n",
              "      <td>F</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0003_01</td>\n",
              "      <td>Europa</td>\n",
              "      <td>False</td>\n",
              "      <td>A/0/S</td>\n",
              "      <td>TRAPPIST-1e</td>\n",
              "      <td>58.0</td>\n",
              "      <td>True</td>\n",
              "      <td>43.0</td>\n",
              "      <td>3576.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>6715.0</td>\n",
              "      <td>49.0</td>\n",
              "      <td>Altark Susent</td>\n",
              "      <td>False</td>\n",
              "      <td>10383.0</td>\n",
              "      <td>A</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0003_02</td>\n",
              "      <td>Europa</td>\n",
              "      <td>False</td>\n",
              "      <td>A/0/S</td>\n",
              "      <td>TRAPPIST-1e</td>\n",
              "      <td>33.0</td>\n",
              "      <td>False</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1283.0</td>\n",
              "      <td>371.0</td>\n",
              "      <td>3329.0</td>\n",
              "      <td>193.0</td>\n",
              "      <td>Solam Susent</td>\n",
              "      <td>False</td>\n",
              "      <td>5176.0</td>\n",
              "      <td>A</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0004_01</td>\n",
              "      <td>Earth</td>\n",
              "      <td>False</td>\n",
              "      <td>F/1/S</td>\n",
              "      <td>TRAPPIST-1e</td>\n",
              "      <td>16.0</td>\n",
              "      <td>False</td>\n",
              "      <td>303.0</td>\n",
              "      <td>70.0</td>\n",
              "      <td>151.0</td>\n",
              "      <td>565.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Willy Santantines</td>\n",
              "      <td>True</td>\n",
              "      <td>1091.0</td>\n",
              "      <td>F</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d599f3c6-a71f-4e32-9490-6ebef14d1931')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-d599f3c6-a71f-4e32-9490-6ebef14d1931 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-d599f3c6-a71f-4e32-9490-6ebef14d1931');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "xyz=pd.get_dummies(df,columns=['Deck'])"
      ],
      "metadata": {
        "id": "psytWRLY28PP"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "xyz.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NQhIaqtB4RF8",
        "outputId": "d9e31814-5f81-4a6d-8249-eb027718a87c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['PassengerId', 'HomePlanet', 'CryoSleep', 'Cabin', 'Destination', 'Age',\n",
              "       'VIP', 'RoomService', 'FoodCourt', 'ShoppingMall', 'Spa', 'VRDeck',\n",
              "       'Name', 'Transported', 'spend', 'SVal', 'VVal', 'Deck_A', 'Deck_B',\n",
              "       'Deck_C', 'Deck_D', 'Deck_E', 'Deck_F', 'Deck_G', 'Deck_T'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "xyz.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 386
        },
        "id": "bQEftenS3ZAT",
        "outputId": "0f9d39ee-5fe7-4e61-b798-d6cb78344d5f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  PassengerId HomePlanet CryoSleep  Cabin  Destination   Age    VIP  \\\n",
              "0     0001_01     Europa     False  B/0/P  TRAPPIST-1e  39.0  False   \n",
              "1     0002_01      Earth     False  F/0/S  TRAPPIST-1e  24.0  False   \n",
              "2     0003_01     Europa     False  A/0/S  TRAPPIST-1e  58.0   True   \n",
              "3     0003_02     Europa     False  A/0/S  TRAPPIST-1e  33.0  False   \n",
              "4     0004_01      Earth     False  F/1/S  TRAPPIST-1e  16.0  False   \n",
              "\n",
              "   RoomService  FoodCourt  ShoppingMall  ...  SVal  VVal Deck_A  Deck_B  \\\n",
              "0          0.0        0.0           0.0  ...     0     0      0       1   \n",
              "1        109.0        9.0          25.0  ...     0     0      0       0   \n",
              "2         43.0     3576.0           0.0  ...     0     1      1       0   \n",
              "3          0.0     1283.0         371.0  ...     0     0      1       0   \n",
              "4        303.0       70.0         151.0  ...     0     0      0       0   \n",
              "\n",
              "   Deck_C  Deck_D  Deck_E  Deck_F  Deck_G  Deck_T  \n",
              "0       0       0       0       0       0       0  \n",
              "1       0       0       0       1       0       0  \n",
              "2       0       0       0       0       0       0  \n",
              "3       0       0       0       0       0       0  \n",
              "4       0       0       0       1       0       0  \n",
              "\n",
              "[5 rows x 25 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c2b8be2e-f5d5-4f2b-b6c7-67927780a0c7\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>HomePlanet</th>\n",
              "      <th>CryoSleep</th>\n",
              "      <th>Cabin</th>\n",
              "      <th>Destination</th>\n",
              "      <th>Age</th>\n",
              "      <th>VIP</th>\n",
              "      <th>RoomService</th>\n",
              "      <th>FoodCourt</th>\n",
              "      <th>ShoppingMall</th>\n",
              "      <th>...</th>\n",
              "      <th>SVal</th>\n",
              "      <th>VVal</th>\n",
              "      <th>Deck_A</th>\n",
              "      <th>Deck_B</th>\n",
              "      <th>Deck_C</th>\n",
              "      <th>Deck_D</th>\n",
              "      <th>Deck_E</th>\n",
              "      <th>Deck_F</th>\n",
              "      <th>Deck_G</th>\n",
              "      <th>Deck_T</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0001_01</td>\n",
              "      <td>Europa</td>\n",
              "      <td>False</td>\n",
              "      <td>B/0/P</td>\n",
              "      <td>TRAPPIST-1e</td>\n",
              "      <td>39.0</td>\n",
              "      <td>False</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0002_01</td>\n",
              "      <td>Earth</td>\n",
              "      <td>False</td>\n",
              "      <td>F/0/S</td>\n",
              "      <td>TRAPPIST-1e</td>\n",
              "      <td>24.0</td>\n",
              "      <td>False</td>\n",
              "      <td>109.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>25.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0003_01</td>\n",
              "      <td>Europa</td>\n",
              "      <td>False</td>\n",
              "      <td>A/0/S</td>\n",
              "      <td>TRAPPIST-1e</td>\n",
              "      <td>58.0</td>\n",
              "      <td>True</td>\n",
              "      <td>43.0</td>\n",
              "      <td>3576.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0003_02</td>\n",
              "      <td>Europa</td>\n",
              "      <td>False</td>\n",
              "      <td>A/0/S</td>\n",
              "      <td>TRAPPIST-1e</td>\n",
              "      <td>33.0</td>\n",
              "      <td>False</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1283.0</td>\n",
              "      <td>371.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0004_01</td>\n",
              "      <td>Earth</td>\n",
              "      <td>False</td>\n",
              "      <td>F/1/S</td>\n",
              "      <td>TRAPPIST-1e</td>\n",
              "      <td>16.0</td>\n",
              "      <td>False</td>\n",
              "      <td>303.0</td>\n",
              "      <td>70.0</td>\n",
              "      <td>151.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 25 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c2b8be2e-f5d5-4f2b-b6c7-67927780a0c7')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-c2b8be2e-f5d5-4f2b-b6c7-67927780a0c7 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-c2b8be2e-f5d5-4f2b-b6c7-67927780a0c7');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "features=['Age','VVal','SVal','RoomService','ShoppingMall','Spa','spend','VRDeck','FoodCourt','Deck_A','Deck_B','Deck_C','Deck_D','Deck_E','Deck_F','Deck_G','Deck_T','spend','VRDeck','FoodCourt']"
      ],
      "metadata": {
        "id": "CWCbBdCJ3bZT"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df['Transported']=df['Transported'].astype('category')\n",
        "df['SCode']=df['Transported'].cat.codes"
      ],
      "metadata": {
        "id": "EfQygG6e5LfP"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_final=xyz[features]\n",
        "y_final=df.SCode.values"
      ],
      "metadata": {
        "id": "y2aIA5yi5wCp"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_final.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "FkCPjUnu58RD",
        "outputId": "5be66262-9e5d-4f74-eb45-a35b147dab9a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    Age  VVal  SVal  RoomService  ShoppingMall     Spa    spend  VRDeck  \\\n",
              "0  39.0     0     0          0.0           0.0     0.0      0.0     0.0   \n",
              "1  24.0     0     0        109.0          25.0   549.0    736.0    44.0   \n",
              "2  58.0     1     0         43.0           0.0  6715.0  10383.0    49.0   \n",
              "3  33.0     0     0          0.0         371.0  3329.0   5176.0   193.0   \n",
              "4  16.0     0     0        303.0         151.0   565.0   1091.0     2.0   \n",
              "\n",
              "   FoodCourt  Deck_A  Deck_B  Deck_C  Deck_D  Deck_E  Deck_F  Deck_G  Deck_T  \\\n",
              "0        0.0       0       1       0       0       0       0       0       0   \n",
              "1        9.0       0       0       0       0       0       1       0       0   \n",
              "2     3576.0       1       0       0       0       0       0       0       0   \n",
              "3     1283.0       1       0       0       0       0       0       0       0   \n",
              "4       70.0       0       0       0       0       0       1       0       0   \n",
              "\n",
              "     spend  VRDeck  FoodCourt  \n",
              "0      0.0     0.0        0.0  \n",
              "1    736.0    44.0        9.0  \n",
              "2  10383.0    49.0     3576.0  \n",
              "3   5176.0   193.0     1283.0  \n",
              "4   1091.0     2.0       70.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2911b798-1b02-4ba4-b109-e86c2765b5a3\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Age</th>\n",
              "      <th>VVal</th>\n",
              "      <th>SVal</th>\n",
              "      <th>RoomService</th>\n",
              "      <th>ShoppingMall</th>\n",
              "      <th>Spa</th>\n",
              "      <th>spend</th>\n",
              "      <th>VRDeck</th>\n",
              "      <th>FoodCourt</th>\n",
              "      <th>Deck_A</th>\n",
              "      <th>Deck_B</th>\n",
              "      <th>Deck_C</th>\n",
              "      <th>Deck_D</th>\n",
              "      <th>Deck_E</th>\n",
              "      <th>Deck_F</th>\n",
              "      <th>Deck_G</th>\n",
              "      <th>Deck_T</th>\n",
              "      <th>spend</th>\n",
              "      <th>VRDeck</th>\n",
              "      <th>FoodCourt</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>39.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>24.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>109.0</td>\n",
              "      <td>25.0</td>\n",
              "      <td>549.0</td>\n",
              "      <td>736.0</td>\n",
              "      <td>44.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>736.0</td>\n",
              "      <td>44.0</td>\n",
              "      <td>9.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>58.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>43.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>6715.0</td>\n",
              "      <td>10383.0</td>\n",
              "      <td>49.0</td>\n",
              "      <td>3576.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>10383.0</td>\n",
              "      <td>49.0</td>\n",
              "      <td>3576.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>33.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>371.0</td>\n",
              "      <td>3329.0</td>\n",
              "      <td>5176.0</td>\n",
              "      <td>193.0</td>\n",
              "      <td>1283.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>5176.0</td>\n",
              "      <td>193.0</td>\n",
              "      <td>1283.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>16.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>303.0</td>\n",
              "      <td>151.0</td>\n",
              "      <td>565.0</td>\n",
              "      <td>1091.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>70.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1091.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>70.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2911b798-1b02-4ba4-b109-e86c2765b5a3')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-2911b798-1b02-4ba4-b109-e86c2765b5a3 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-2911b798-1b02-4ba4-b109-e86c2765b5a3');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_final.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "74g6pYjU5-97",
        "outputId": "dc47fef6-43e5-4411-e138-1091fea3f356"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(6606, 20)"
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_final.reshape(-1,1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6b3NW--M6DnC",
        "outputId": "ad5c5849-a17d-4f70-ebdb-6870f2acfd91"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[0],\n",
              "       [1],\n",
              "       [0],\n",
              "       ...,\n",
              "       [1],\n",
              "       [0],\n",
              "       [1]], dtype=int8)"
            ]
          },
          "metadata": {},
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_final.dtypes"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GyibeAT07AIF",
        "outputId": "4a0fd33b-f886-44ec-9126-2ca6a7efd74e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Age             float64\n",
              "VVal               int8\n",
              "SVal               int8\n",
              "RoomService     float64\n",
              "ShoppingMall    float64\n",
              "Spa             float64\n",
              "spend           float64\n",
              "VRDeck          float64\n",
              "FoodCourt       float64\n",
              "Deck_A            uint8\n",
              "Deck_B            uint8\n",
              "Deck_C            uint8\n",
              "Deck_D            uint8\n",
              "Deck_E            uint8\n",
              "Deck_F            uint8\n",
              "Deck_G            uint8\n",
              "Deck_T            uint8\n",
              "spend           float64\n",
              "VRDeck          float64\n",
              "FoodCourt       float64\n",
              "dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Done with getting the DataFrame and all the required features under df_final.\n",
        "The teleported boolean values are under y_final "
      ],
      "metadata": {
        "id": "8Tk6PnOKr36w"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Analysis of the Data"
      ],
      "metadata": {
        "id": "O8m82HzgsIgI"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_final.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 364
        },
        "id": "vQx6wuLmsMK4",
        "outputId": "1ba22642-22a5-4234-bf49-c4e8a4326004"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "               Age         VVal         SVal  RoomService  ShoppingMall  \\\n",
              "count  6606.000000  6606.000000  6606.000000  6606.000000   6606.000000   \n",
              "mean     28.894036     0.024523     0.353012   222.991674    178.356494   \n",
              "std      14.533429     0.154678     0.477943   644.987936    576.328407   \n",
              "min       0.000000     0.000000     0.000000     0.000000      0.000000   \n",
              "25%      19.000000     0.000000     0.000000     0.000000      0.000000   \n",
              "50%      27.000000     0.000000     0.000000     0.000000      0.000000   \n",
              "75%      38.000000     0.000000     1.000000    49.000000     30.000000   \n",
              "max      79.000000     1.000000     1.000000  9920.000000  12253.000000   \n",
              "\n",
              "                Spa         spend        VRDeck     FoodCourt       Deck_A  \\\n",
              "count   6606.000000   6606.000000   6606.000000   6606.000000  6606.000000   \n",
              "mean     313.161520   1497.248259    303.780048    478.958523     0.031335   \n",
              "std     1144.016291   2860.618493   1127.142166   1678.592291     0.174235   \n",
              "min        0.000000      0.000000      0.000000      0.000000     0.000000   \n",
              "25%        0.000000      0.000000      0.000000      0.000000     0.000000   \n",
              "50%        0.000000    739.000000      0.000000      0.000000     0.000000   \n",
              "75%       65.000000   1513.750000     52.000000     82.750000     0.000000   \n",
              "max    22408.000000  35987.000000  20336.000000  29813.000000     1.000000   \n",
              "\n",
              "            Deck_B       Deck_C       Deck_D       Deck_E       Deck_F  \\\n",
              "count  6606.000000  6606.000000  6606.000000  6606.000000  6606.000000   \n",
              "mean      0.095065     0.088859     0.056615     0.103391     0.325764   \n",
              "std       0.293327     0.284561     0.231123     0.304492     0.468695   \n",
              "min       0.000000     0.000000     0.000000     0.000000     0.000000   \n",
              "25%       0.000000     0.000000     0.000000     0.000000     0.000000   \n",
              "50%       0.000000     0.000000     0.000000     0.000000     0.000000   \n",
              "75%       0.000000     0.000000     0.000000     0.000000     1.000000   \n",
              "max       1.000000     1.000000     1.000000     1.000000     1.000000   \n",
              "\n",
              "            Deck_G       Deck_T         spend        VRDeck     FoodCourt  \n",
              "count  6606.000000  6606.000000   6606.000000   6606.000000   6606.000000  \n",
              "mean      0.298668     0.000303   1497.248259    303.780048    478.958523  \n",
              "std       0.457709     0.017399   2860.618493   1127.142166   1678.592291  \n",
              "min       0.000000     0.000000      0.000000      0.000000      0.000000  \n",
              "25%       0.000000     0.000000      0.000000      0.000000      0.000000  \n",
              "50%       0.000000     0.000000    739.000000      0.000000      0.000000  \n",
              "75%       1.000000     0.000000   1513.750000     52.000000     82.750000  \n",
              "max       1.000000     1.000000  35987.000000  20336.000000  29813.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ce416761-78c7-45f4-abfa-1ab17aff7d9c\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Age</th>\n",
              "      <th>VVal</th>\n",
              "      <th>SVal</th>\n",
              "      <th>RoomService</th>\n",
              "      <th>ShoppingMall</th>\n",
              "      <th>Spa</th>\n",
              "      <th>spend</th>\n",
              "      <th>VRDeck</th>\n",
              "      <th>FoodCourt</th>\n",
              "      <th>Deck_A</th>\n",
              "      <th>Deck_B</th>\n",
              "      <th>Deck_C</th>\n",
              "      <th>Deck_D</th>\n",
              "      <th>Deck_E</th>\n",
              "      <th>Deck_F</th>\n",
              "      <th>Deck_G</th>\n",
              "      <th>Deck_T</th>\n",
              "      <th>spend</th>\n",
              "      <th>VRDeck</th>\n",
              "      <th>FoodCourt</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>6606.000000</td>\n",
              "      <td>6606.000000</td>\n",
              "      <td>6606.000000</td>\n",
              "      <td>6606.000000</td>\n",
              "      <td>6606.000000</td>\n",
              "      <td>6606.000000</td>\n",
              "      <td>6606.000000</td>\n",
              "      <td>6606.000000</td>\n",
              "      <td>6606.000000</td>\n",
              "      <td>6606.000000</td>\n",
              "      <td>6606.000000</td>\n",
              "      <td>6606.000000</td>\n",
              "      <td>6606.000000</td>\n",
              "      <td>6606.000000</td>\n",
              "      <td>6606.000000</td>\n",
              "      <td>6606.000000</td>\n",
              "      <td>6606.000000</td>\n",
              "      <td>6606.000000</td>\n",
              "      <td>6606.000000</td>\n",
              "      <td>6606.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>28.894036</td>\n",
              "      <td>0.024523</td>\n",
              "      <td>0.353012</td>\n",
              "      <td>222.991674</td>\n",
              "      <td>178.356494</td>\n",
              "      <td>313.161520</td>\n",
              "      <td>1497.248259</td>\n",
              "      <td>303.780048</td>\n",
              "      <td>478.958523</td>\n",
              "      <td>0.031335</td>\n",
              "      <td>0.095065</td>\n",
              "      <td>0.088859</td>\n",
              "      <td>0.056615</td>\n",
              "      <td>0.103391</td>\n",
              "      <td>0.325764</td>\n",
              "      <td>0.298668</td>\n",
              "      <td>0.000303</td>\n",
              "      <td>1497.248259</td>\n",
              "      <td>303.780048</td>\n",
              "      <td>478.958523</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>14.533429</td>\n",
              "      <td>0.154678</td>\n",
              "      <td>0.477943</td>\n",
              "      <td>644.987936</td>\n",
              "      <td>576.328407</td>\n",
              "      <td>1144.016291</td>\n",
              "      <td>2860.618493</td>\n",
              "      <td>1127.142166</td>\n",
              "      <td>1678.592291</td>\n",
              "      <td>0.174235</td>\n",
              "      <td>0.293327</td>\n",
              "      <td>0.284561</td>\n",
              "      <td>0.231123</td>\n",
              "      <td>0.304492</td>\n",
              "      <td>0.468695</td>\n",
              "      <td>0.457709</td>\n",
              "      <td>0.017399</td>\n",
              "      <td>2860.618493</td>\n",
              "      <td>1127.142166</td>\n",
              "      <td>1678.592291</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>19.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>27.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>739.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>739.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>38.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>49.000000</td>\n",
              "      <td>30.000000</td>\n",
              "      <td>65.000000</td>\n",
              "      <td>1513.750000</td>\n",
              "      <td>52.000000</td>\n",
              "      <td>82.750000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1513.750000</td>\n",
              "      <td>52.000000</td>\n",
              "      <td>82.750000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>79.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>9920.000000</td>\n",
              "      <td>12253.000000</td>\n",
              "      <td>22408.000000</td>\n",
              "      <td>35987.000000</td>\n",
              "      <td>20336.000000</td>\n",
              "      <td>29813.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>35987.000000</td>\n",
              "      <td>20336.000000</td>\n",
              "      <td>29813.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ce416761-78c7-45f4-abfa-1ab17aff7d9c')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-ce416761-78c7-45f4-abfa-1ab17aff7d9c button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-ce416761-78c7-45f4-abfa-1ab17aff7d9c');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 196
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_final.dtypes"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "C_YI0c5xDroJ",
        "outputId": "a451b0e8-dbf4-455a-bcf0-7df18bff2c4f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Age             float64\n",
              "VVal               int8\n",
              "SVal               int8\n",
              "RoomService     float64\n",
              "ShoppingMall    float64\n",
              "Spa             float64\n",
              "spend           float64\n",
              "VRDeck          float64\n",
              "FoodCourt       float64\n",
              "Deck_A            uint8\n",
              "Deck_B            uint8\n",
              "Deck_C            uint8\n",
              "Deck_D            uint8\n",
              "Deck_E            uint8\n",
              "Deck_F            uint8\n",
              "Deck_G            uint8\n",
              "Deck_T            uint8\n",
              "spend           float64\n",
              "VRDeck          float64\n",
              "FoodCourt       float64\n",
              "dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 198
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "num_teleported=df.loc[df.Transported==True].count()[0]\n",
        "num_not_teleported=df.loc[df.Transported==False].count()[0]\n",
        "\n",
        "labels=[' Teleported', 'Not Teleported']\n",
        "\n",
        "plt.pie([num_teleported,num_not_teleported], labels=labels)\n",
        "plt.show()\n",
        "\n",
        "#The overall distribution of people transported and not transported"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 248
        },
        "id": "Z9LIX8FFEd4y",
        "outputId": "626a1882-10ff-4093-f354-0cba6e48ccb4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "spend_low=df.loc[df.spend<=739].count()[0]#739 is the 50th %ile of the spend val\n",
        "spend_high=df.loc[df.spend>=4357].count()[0]\n",
        "\n",
        "spend_mid_boolval=((df['spend']>739 ) & (df['spend']<4357))\n",
        "\n",
        "spend_mid=0\n",
        "\n",
        "for iterate in spend_mid_boolval:\n",
        "  if(iterate==True):\n",
        "    spend_mid+=1\n",
        "\n",
        "labels_a=['Low Income', 'Mid Income','High Income']\n",
        "\n",
        "plt.pie([spend_low,spend_mid,spend_high], labels=labels_a)\n",
        "plt.show()\n",
        "\n",
        "#getting the income distribution on the craft"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 248
        },
        "id": "mkGmLziXFX28",
        "outputId": "2da5ea84-214d-46d0-9af9-3d502aedc205"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.xlabel('Amount Spent on Entertainment')\n",
        "plt.ylabel('Number of Travellers')\n",
        "\n",
        "plt.hist(df.spend)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "id": "I1iQd9jGJOcM",
        "outputId": "9bb3750d-2a5e-4dd6-aa42-58792f94eba5"
      },
      "execution_count": 229,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_transported=df.loc[df.Transported==True]\n",
        "df_not_transported=df.loc[df.Transported==False]\n",
        "\n",
        "#getting into separate dataframes the prople transported and not transported"
      ],
      "metadata": {
        "id": "v1uKk_zTJpdA"
      },
      "execution_count": 231,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plt.xlabel('Amount spent(Teleport=True)')\n",
        "plt.ylabel('Number of Travellers')\n",
        "\n",
        "plt.hist(df_transported.spend)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "id": "2cR-bFTKLYof",
        "outputId": "3491e518-62ff-4bbb-9faf-60d0483e063d"
      },
      "execution_count": 232,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.xlabel('Amount spent(Teleport=False)')\n",
        "plt.ylabel('Number of Travellers')\n",
        "\n",
        "plt.hist(df_not_transported.spend)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "id": "q7BoGKL-LuQ9",
        "outputId": "141253bb-41ec-4416-fd10-f7ea3d1f627a"
      },
      "execution_count": 233,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Thus the income distribution in both the transported and !transported travellers is almost similar thus we can infer that income levels were not a major deciding factor"
      ],
      "metadata": {
        "id": "aYOcynPqL6Tm"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_deck_A=xyz.loc[xyz.Deck_A==1]\n",
        "df_deck_B=xyz.loc[xyz.Deck_B==1]\n",
        "df_deck_C=xyz.loc[xyz.Deck_C==1]\n",
        "df_deck_D=xyz.loc[xyz.Deck_D==1]\n",
        "df_deck_E=xyz.loc[xyz.Deck_E==1]\n",
        "df_deck_F=xyz.loc[xyz.Deck_F==1]\n",
        "df_deck_T=xyz.loc[xyz.Deck_T==1]"
      ],
      "metadata": {
        "id": "snVxr-SbMJNd"
      },
      "execution_count": 234,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "num_teleported_a=df_deck_A.loc[df_deck_A.Transported==True].count()[0]\n",
        "num_not_teleported_a=df_deck_A.loc[df_deck_A.Transported==False].count()[0]\n",
        "\n",
        "labels_a=[' Teleported in Deck A', 'Not Teleported in Deck A']\n",
        "\n",
        "plt.pie([num_teleported_a,num_not_teleported_a], labels=labels)\n",
        "plt.show()\n",
        "\n",
        "#The overall distribution of people transported and not transported in Deck A"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 248
        },
        "id": "XodzNHeBNEHW",
        "outputId": "3fbb72b4-4b7d-4845-b6ba-9b10be0ff1ab"
      },
      "execution_count": 236,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "num_teleported_b=df_deck_B.loc[df_deck_B.Transported==True].count()[0]\n",
        "num_not_teleported_b=df_deck_B.loc[df_deck_B.Transported==False].count()[0]\n",
        "\n",
        "labels_a=[' Teleported in Deck B', 'Not Teleported in Deck B']\n",
        "\n",
        "plt.pie([num_teleported_a,num_not_teleported_a], labels=labels_a)\n",
        "plt.show()\n",
        "\n",
        "#The overall distribution of people transported and not transported in Deck B"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 248
        },
        "id": "v0YVH-ohNjt_",
        "outputId": "5949cd9c-7ced-4cfc-94a1-d20e8fed8040"
      },
      "execution_count": 242,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "num_teleported_c=df_deck_C.loc[df_deck_C.Transported==True].count()[0]\n",
        "num_not_teleported_c=df_deck_C.loc[df_deck_C.Transported==False].count()[0]\n",
        "\n",
        "labels_c=[' Teleported in Deck C', 'Not Teleported in Deck C']\n",
        "\n",
        "plt.pie([num_teleported_c,num_not_teleported_c], labels=labels_c)\n",
        "plt.show()\n",
        "\n",
        "#The overall distribution of people transported and not transported in Deck C"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 248
        },
        "id": "IdQXZ7t5OJWT",
        "outputId": "7e353b40-11d8-4c8e-bdf4-874494d4186a"
      },
      "execution_count": 244,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "num_teleported_d=df_deck_D.loc[df_deck_D.Transported==True].count()[0]\n",
        "num_not_teleported_d=df_deck_D.loc[df_deck_D.Transported==False].count()[0]\n",
        "\n",
        "labels_d=[' Teleported in Deck D', 'Not Teleported in Deck D']\n",
        "\n",
        "plt.pie([num_teleported_d,num_not_teleported_d], labels=labels_d)\n",
        "plt.show()\n",
        "\n",
        "#The overall distribution of people transported and not transported in Deck D"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 248
        },
        "id": "FrTXDrO0Of4t",
        "outputId": "8fe97d46-ad7b-4116-d63b-87b068bb58d9"
      },
      "execution_count": 247,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "num_teleported_e=df_deck_E.loc[df_deck_E.Transported==True].count()[0]\n",
        "num_not_teleported_e=df_deck_E.loc[df_deck_E.Transported==False].count()[0]\n",
        "\n",
        "labels_e=[' Teleported in Deck E', 'Not Teleported in Deck E']\n",
        "\n",
        "plt.pie([num_teleported_e,num_not_teleported_e], labels=labels_e)\n",
        "plt.show()\n",
        "\n",
        "#The overall distribution of people transported and not transported in Deck E"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 248
        },
        "id": "vn6VWnLzO7o0",
        "outputId": "03f1ba46-992b-4938-8e5f-88a960222a44"
      },
      "execution_count": 248,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "num_teleported_f=df_deck_F.loc[df_deck_F.Transported==True].count()[0]\n",
        "num_not_teleported_f=df_deck_F.loc[df_deck_F.Transported==False].count()[0]\n",
        "\n",
        "labels_f=[' Teleported in Deck F', 'Not Teleported in Deck F']\n",
        "\n",
        "plt.pie([num_teleported_f,num_not_teleported_f], labels=labels_f)\n",
        "plt.show()\n",
        "\n",
        "#The overall distribution of people transported and not transported in Deck F"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 248
        },
        "id": "ymXGaURzPJiC",
        "outputId": "dc0431bb-cae8-42df-ce27-69c70ebc0e1d"
      },
      "execution_count": 249,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "num_teleported_t=df_deck_T.loc[df_deck_T.Transported==True].count()[0]\n",
        "num_not_teleported_t=df_deck_T.loc[df_deck_T.Transported==False].count()[0]\n",
        "\n",
        "labels_t=[' Teleported in Deck T', 'Not Teleported in Deck T']\n",
        "\n",
        "plt.pie([num_teleported_t,num_not_teleported_t], labels=labels_t)\n",
        "plt.show()\n",
        "\n",
        "#The overall distribution of people transported and not transported in Deck C"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 248
        },
        "id": "9b16HO7JPZlt",
        "outputId": "960f5113-1832-4fab-b153-b35b404c64e8"
      },
      "execution_count": 250,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#the preceding plots tell us that the travellers in decks 'A' and 'T' were pretty much not affected by their deck. For the rest of the decks the deck in which a traveller was\n",
        "#significantly affected their outcome of being transported."
      ],
      "metadata": {
        "id": "0GrR169NPoyN"
      },
      "execution_count": 252,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "incryo=xyz.loc[xyz.CryoSleep==True]\n",
        "notincryo=xyz.loc[xyz.CryoSleep==False]"
      ],
      "metadata": {
        "id": "xA1DwHo9QrAo"
      },
      "execution_count": 254,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "num_teleported_incryo=incryo.loc[incryo.Transported==True].count()[0]\n",
        "num_not_teleported_incryo=incryo.loc[incryo.Transported==False].count()[0]\n",
        "\n",
        "labels_incryo=[' Teleported while in CryoSleep', 'Not Teleported while in CryoSleep']\n",
        "\n",
        "plt.pie([num_teleported_incryo,num_not_teleported_incryo], labels=labels_incryo)\n",
        "plt.show()\n",
        "\n",
        "#Distribution of the travellers transported while in CryoSleep"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 248
        },
        "id": "pVGBZ7PhRAY5",
        "outputId": "22f3572b-f7ca-445f-ef2f-02c2d43f75a0"
      },
      "execution_count": 257,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "num_teleported_notincryo=notincryo.loc[notincryo.Transported==True].count()[0]\n",
        "num_not_teleported_notincryo=notincryo.loc[notincryo.Transported==False].count()[0]\n",
        "\n",
        "labels_notincryo=[' Teleported while not in CryoSleep', 'Not Teleported while not in CryoSleep']\n",
        "\n",
        "plt.pie([num_teleported_notincryo,num_not_teleported_notincryo], labels=labels_notincryo)\n",
        "plt.show()\n",
        "\n",
        "#Distribution of the travellers transported while not in CryoSleep"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 248
        },
        "id": "9Oa9_fyURyv4",
        "outputId": "cd325437-db90-47b3-f18a-409d5e078794"
      },
      "execution_count": 258,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#thus the preceding analysis allows us to conclude that most of those in Cryo were teleported\n",
        "#and most of those not in cryosleep were not teleported"
      ],
      "metadata": {
        "id": "aVsiWlthSGae"
      },
      "execution_count": 259,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# The Model"
      ],
      "metadata": {
        "id": "Wjy7cRgl4rT-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "input=tf.keras.layers.Input(20)\n",
        "hidden1=tf.keras.layers.Dense(80, activation='relu')(input)\n",
        "hidden2=tf.keras.layers.Dense(80, activation='relu')(hidden1)\n",
        "output=tf.keras.layers.Dense(1,activation='sigmoid')(hidden2)"
      ],
      "metadata": {
        "id": "X1wc6kg54tak"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model=tf.keras.Model(inputs=input,outputs=output)"
      ],
      "metadata": {
        "id": "YeLRdwie5H-Z"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#model.compile(optimizer=tf.keras.optimizers.SGD(learning_rate=0.01), loss=tf.compat.v1.losses.log_loss,metrics=['accuracy'])\n",
        "model.compile(optimizer='adam', loss='binary_crossentropy',metrics=['accuracy'])"
      ],
      "metadata": {
        "id": "w20e0hp26a9r"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model.fit(df_final,y_final,epochs=10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Yf2x0y6461Ab",
        "outputId": "304d50e6-8131-4dca-f1d3-70efde81326a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/10\n",
            "207/207 [==============================] - 1s 2ms/step - loss: 6.4245 - accuracy: 0.7498\n",
            "Epoch 2/10\n",
            "207/207 [==============================] - 0s 2ms/step - loss: 4.8536 - accuracy: 0.7572\n",
            "Epoch 3/10\n",
            "207/207 [==============================] - 0s 2ms/step - loss: 3.6453 - accuracy: 0.7560\n",
            "Epoch 4/10\n",
            "207/207 [==============================] - 0s 2ms/step - loss: 2.7947 - accuracy: 0.7617\n",
            "Epoch 5/10\n",
            "207/207 [==============================] - 0s 2ms/step - loss: 2.1362 - accuracy: 0.7678\n",
            "Epoch 6/10\n",
            "207/207 [==============================] - 0s 2ms/step - loss: 2.1225 - accuracy: 0.7607\n",
            "Epoch 7/10\n",
            "207/207 [==============================] - 0s 2ms/step - loss: 2.0731 - accuracy: 0.7640\n",
            "Epoch 8/10\n",
            "207/207 [==============================] - 0s 2ms/step - loss: 1.7594 - accuracy: 0.7660\n",
            "Epoch 9/10\n",
            "207/207 [==============================] - 0s 2ms/step - loss: 2.0784 - accuracy: 0.7578\n",
            "Epoch 10/10\n",
            "207/207 [==============================] - 0s 2ms/step - loss: 1.8693 - accuracy: 0.7690\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.callbacks.History at 0x7f25a4935e10>"
            ]
          },
          "metadata": {},
          "execution_count": 179
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model.fit(df_final,y_final,epochs=5)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KrGHuOEyYaKl",
        "outputId": "f79f7c66-cc87-4c9e-bef4-8b7f1b579bad"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/5\n",
            "207/207 [==============================] - 0s 2ms/step - loss: 1.5862 - accuracy: 0.7691\n",
            "Epoch 2/5\n",
            "207/207 [==============================] - 0s 2ms/step - loss: 1.0921 - accuracy: 0.7708\n",
            "Epoch 3/5\n",
            "207/207 [==============================] - 0s 2ms/step - loss: 1.0568 - accuracy: 0.7670\n",
            "Epoch 4/5\n",
            "207/207 [==============================] - 0s 2ms/step - loss: 0.9758 - accuracy: 0.7667\n",
            "Epoch 5/5\n",
            "207/207 [==============================] - 0s 2ms/step - loss: 1.5359 - accuracy: 0.7622\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.callbacks.History at 0x7f25a477c890>"
            ]
          },
          "metadata": {},
          "execution_count": 180
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model.fit(df_final,y_final,epochs=20)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Vtp_3dohYfk9",
        "outputId": "b26002d7-9269-4bdb-bfc1-12366dca2f31"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/20\n",
            "207/207 [==============================] - 0s 2ms/step - loss: 1.1127 - accuracy: 0.7725\n",
            "Epoch 2/20\n",
            "207/207 [==============================] - 0s 2ms/step - loss: 1.2380 - accuracy: 0.7673\n",
            "Epoch 3/20\n",
            "207/207 [==============================] - 0s 2ms/step - loss: 0.8461 - accuracy: 0.7748\n",
            "Epoch 4/20\n",
            "207/207 [==============================] - 0s 2ms/step - loss: 0.7811 - accuracy: 0.7755\n",
            "Epoch 5/20\n",
            "207/207 [==============================] - 0s 2ms/step - loss: 0.9048 - accuracy: 0.7666\n",
            "Epoch 6/20\n",
            "207/207 [==============================] - 1s 3ms/step - loss: 0.6129 - accuracy: 0.7811\n",
            "Epoch 7/20\n",
            "207/207 [==============================] - 1s 3ms/step - loss: 0.6336 - accuracy: 0.7766\n",
            "Epoch 8/20\n",
            "207/207 [==============================] - 1s 3ms/step - loss: 0.6656 - accuracy: 0.7772\n",
            "Epoch 9/20\n",
            "207/207 [==============================] - 1s 3ms/step - loss: 0.6843 - accuracy: 0.7787\n",
            "Epoch 10/20\n",
            "207/207 [==============================] - 0s 2ms/step - loss: 0.5806 - accuracy: 0.7817\n",
            "Epoch 11/20\n",
            "207/207 [==============================] - 0s 2ms/step - loss: 0.5711 - accuracy: 0.7814\n",
            "Epoch 12/20\n",
            "207/207 [==============================] - 0s 2ms/step - loss: 0.5524 - accuracy: 0.7770\n",
            "Epoch 13/20\n",
            "207/207 [==============================] - 0s 2ms/step - loss: 0.6601 - accuracy: 0.7800\n",
            "Epoch 14/20\n",
            "207/207 [==============================] - 0s 2ms/step - loss: 0.6178 - accuracy: 0.7875\n",
            "Epoch 15/20\n",
            "207/207 [==============================] - 0s 2ms/step - loss: 0.5403 - accuracy: 0.7860\n",
            "Epoch 16/20\n",
            "207/207 [==============================] - 0s 2ms/step - loss: 0.5957 - accuracy: 0.7861\n",
            "Epoch 17/20\n",
            "207/207 [==============================] - 0s 2ms/step - loss: 0.6047 - accuracy: 0.7826\n",
            "Epoch 18/20\n",
            "207/207 [==============================] - 0s 2ms/step - loss: 0.4978 - accuracy: 0.7891\n",
            "Epoch 19/20\n",
            "207/207 [==============================] - 0s 2ms/step - loss: 0.4719 - accuracy: 0.7911\n",
            "Epoch 20/20\n",
            "207/207 [==============================] - 0s 2ms/step - loss: 0.4818 - accuracy: 0.7879\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.callbacks.History at 0x7f25a471f590>"
            ]
          },
          "metadata": {},
          "execution_count": 181
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model.fit(df_final,y_final,epochs=1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3thYAOvPaSop",
        "outputId": "d3b4c776-a377-4bd4-ad81-52138d58bb7a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "207/207 [==============================] - 0s 2ms/step - loss: 0.4650 - accuracy: 0.7943\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.callbacks.History at 0x7f25a4741ed0>"
            ]
          },
          "metadata": {},
          "execution_count": 182
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model.save('pred_make_a.h5')\n",
        "#model saved at 79% accuracy"
      ],
      "metadata": {
        "id": "b7Wkvi0N1j1q"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model.fit(df_final,y_final,epochs=5)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HhMCtEQNaYgH",
        "outputId": "934de6cb-fa15-442b-e7f9-804f1fdcd85c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/5\n",
            "207/207 [==============================] - 0s 2ms/step - loss: 0.4889 - accuracy: 0.7917\n",
            "Epoch 2/5\n",
            "207/207 [==============================] - 0s 2ms/step - loss: 0.4549 - accuracy: 0.7940\n",
            "Epoch 3/5\n",
            "207/207 [==============================] - 0s 2ms/step - loss: 0.4589 - accuracy: 0.7959\n",
            "Epoch 4/5\n",
            "207/207 [==============================] - 0s 2ms/step - loss: 0.4420 - accuracy: 0.7937\n",
            "Epoch 5/5\n",
            "207/207 [==============================] - 0s 2ms/step - loss: 0.4352 - accuracy: 0.7994\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.callbacks.History at 0x7f25a477cc50>"
            ]
          },
          "metadata": {},
          "execution_count": 184
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model.fit(df_final,y_final,epochs=10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0q328V5DabxH",
        "outputId": "d0d47b3f-4f44-47b8-a78f-d8103f24cc6c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/10\n",
            "207/207 [==============================] - 0s 2ms/step - loss: 0.4412 - accuracy: 0.7982\n",
            "Epoch 2/10\n",
            "207/207 [==============================] - 0s 2ms/step - loss: 0.4393 - accuracy: 0.7981\n",
            "Epoch 3/10\n",
            "207/207 [==============================] - 0s 2ms/step - loss: 0.4241 - accuracy: 0.8002\n",
            "Epoch 4/10\n",
            "207/207 [==============================] - 0s 2ms/step - loss: 0.4294 - accuracy: 0.8011\n",
            "Epoch 5/10\n",
            "207/207 [==============================] - 0s 2ms/step - loss: 0.4223 - accuracy: 0.7987\n",
            "Epoch 6/10\n",
            "207/207 [==============================] - 0s 2ms/step - loss: 0.4280 - accuracy: 0.7959\n",
            "Epoch 7/10\n",
            "207/207 [==============================] - 0s 2ms/step - loss: 0.4312 - accuracy: 0.8017\n",
            "Epoch 8/10\n",
            "207/207 [==============================] - 0s 2ms/step - loss: 0.4332 - accuracy: 0.7985\n",
            "Epoch 9/10\n",
            "207/207 [==============================] - 0s 2ms/step - loss: 0.4252 - accuracy: 0.7962\n",
            "Epoch 10/10\n",
            "207/207 [==============================] - 0s 2ms/step - loss: 0.4215 - accuracy: 0.7997\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.callbacks.History at 0x7f25a4713210>"
            ]
          },
          "metadata": {},
          "execution_count": 185
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model.fit(df_final,y_final,epochs=3)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NDcRL8XVahfw",
        "outputId": "0461fcd9-9492-4ca3-9421-1c5fa26a776e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/3\n",
            "207/207 [==============================] - 0s 2ms/step - loss: 0.4290 - accuracy: 0.7961\n",
            "Epoch 2/3\n",
            "207/207 [==============================] - 0s 2ms/step - loss: 0.4210 - accuracy: 0.7982\n",
            "Epoch 3/3\n",
            "207/207 [==============================] - 0s 2ms/step - loss: 0.4189 - accuracy: 0.8000\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.callbacks.History at 0x7f25a4712350>"
            ]
          },
          "metadata": {},
          "execution_count": 186
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#we got the model to 80% accuracy now we stop training as the model might overfit"
      ],
      "metadata": {
        "id": "WFhUi4-f17st"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model.save(\"model_used_make_pred_b.h5\")\n",
        "#model saved at 80% accuracy"
      ],
      "metadata": {
        "id": "gUOXsd5Jalu4"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#training stopped"
      ],
      "metadata": {
        "id": "9LlqfSp6211n"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Model 2.0"
      ],
      "metadata": {
        "id": "ydRz8bi6bV8S"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "inputs_a_a=tf.keras.layers.Input(20)\n",
        "hidden_a=tf.keras.layers.Dense(1,activation='relu')(inputs_a_a)\n",
        "hidden_b=tf.keras.layers.Dense(10,activation='relu')(hidden_a)\n",
        "hidden_c=tf.keras.layers.Dense(1,activation='relu')(hidden_b)\n",
        "hidden_d=tf.keras.layers.Dense(10,activation='relu')(hidden_c)\n",
        "output_a_a=tf.keras.layers.Dense(1,activation='sigmoid')(hidden_d)"
      ],
      "metadata": {
        "id": "5Pty_8AUbaCv"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model_b=tf.keras.Model(inputs=inputs_a_a, outputs=output_a_a)"
      ],
      "metadata": {
        "id": "en0XMwticVDM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model_b.compile(optimizer=tf.keras.optimizers.SGD(learning_rate=0.01), loss='mse',metrics=['accuracy'])#tf.compat.v1.losses.log_loss"
      ],
      "metadata": {
        "id": "qZ2qhkQ_cpdW"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model_b.fit(df_final, y_final, epochs=1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fN234AUxce1g",
        "outputId": "0f49a9a8-2a6e-45ae-cbd9-bb037003df5d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "207/207 [==============================] - 1s 1ms/step - loss: 0.2250 - accuracy: 0.5975\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.callbacks.History at 0x7f25b02a3b90>"
            ]
          },
          "metadata": {},
          "execution_count": 38
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model_b.fit(df_final, y_final, epochs=10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "57b2mStmdgA6",
        "outputId": "d28d8726-e221-4253-a14f-45730b07334b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/10\n",
            "207/207 [==============================] - 0s 1ms/step - loss: 0.2174 - accuracy: 0.6677\n",
            "Epoch 2/10\n",
            "207/207 [==============================] - 0s 1ms/step - loss: 0.2137 - accuracy: 0.6750\n",
            "Epoch 3/10\n",
            "207/207 [==============================] - 0s 1ms/step - loss: 0.2108 - accuracy: 0.6913\n",
            "Epoch 4/10\n",
            "207/207 [==============================] - 0s 1ms/step - loss: 0.2063 - accuracy: 0.7098\n",
            "Epoch 5/10\n",
            "207/207 [==============================] - 0s 1ms/step - loss: 0.2051 - accuracy: 0.7109\n",
            "Epoch 6/10\n",
            "207/207 [==============================] - 0s 1ms/step - loss: 0.1887 - accuracy: 0.7625\n",
            "Epoch 7/10\n",
            "207/207 [==============================] - 0s 1ms/step - loss: 0.1786 - accuracy: 0.7802\n",
            "Epoch 8/10\n",
            "207/207 [==============================] - 0s 1ms/step - loss: 0.1740 - accuracy: 0.7852\n",
            "Epoch 9/10\n",
            "207/207 [==============================] - 0s 1ms/step - loss: 0.2638 - accuracy: 0.5179\n",
            "Epoch 10/10\n",
            "207/207 [==============================] - 0s 1ms/step - loss: 0.1760 - accuracy: 0.7929\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.callbacks.History at 0x7f25b01bc690>"
            ]
          },
          "metadata": {},
          "execution_count": 39
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model_b.save(\"model_pred_c.h5\")\n",
        "#model saved at 79.29% accuracy"
      ],
      "metadata": {
        "id": "20A954zIsxrP"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model_b.fit(df_final, y_final, epochs=5)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xYWCqNjGfnH2",
        "outputId": "906fa60b-cb23-4be1-fdea-d3d7416055e1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/5\n",
            "207/207 [==============================] - 0s 1ms/step - loss: 0.1708 - accuracy: 0.7897\n",
            "Epoch 2/5\n",
            "207/207 [==============================] - 0s 1ms/step - loss: 0.1684 - accuracy: 0.7873\n",
            "Epoch 3/5\n",
            "207/207 [==============================] - 0s 2ms/step - loss: 0.1668 - accuracy: 0.7872\n",
            "Epoch 4/5\n",
            "207/207 [==============================] - 0s 1ms/step - loss: 0.1660 - accuracy: 0.7847\n",
            "Epoch 5/5\n",
            "207/207 [==============================] - 0s 1ms/step - loss: 0.1656 - accuracy: 0.7870\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.callbacks.History at 0x7f25b031e610>"
            ]
          },
          "metadata": {},
          "execution_count": 42
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#since the accuracy has started to decrease it is now time to stop training"
      ],
      "metadata": {
        "id": "RWvF5o7GtPeO"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Model 3.0"
      ],
      "metadata": {
        "id": "FtgprIiNfxsm"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "inputs_a_b=tf.keras.layers.Input(20)\n",
        "hidden_a_b=tf.keras.layers.Dense(1,activation='relu')(inputs_a_b)\n",
        "hidden_b_b=tf.keras.layers.Dense(10,activation='relu')(hidden_a_b)\n",
        "hidden_c_b=tf.keras.layers.Dense(1,activation='sigmoid')(hidden_b_b)\n",
        "hidden_d_b=tf.keras.layers.Dense(10,activation='relu')(hidden_c_b)\n",
        "output_a_b=tf.keras.layers.Dense(1,activation='sigmoid')(hidden_d_b)"
      ],
      "metadata": {
        "id": "CH08Q9lmf1di"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model_c=tf.keras.Model(inputs=inputs_a_b, outputs=output_a_b)"
      ],
      "metadata": {
        "id": "5qRMuXkdgRZf"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model_c.compile(optimizer=tf.keras.optimizers.SGD(learning_rate=0.001), loss='mse',metrics=['accuracy'])#tf.compat.v1.losses.log_loss"
      ],
      "metadata": {
        "id": "VKgMmA8PgVal"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model_c.fit(df_final, y_final, epochs=1)"
      ],
      "metadata": {
        "id": "5v1N_nQGgX_A",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a9ecc1fd-9339-48cc-c337-17677436655d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "207/207 [==============================] - 1s 1ms/step - loss: 0.2549 - accuracy: 0.2592\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.callbacks.History at 0x7f25aff09290>"
            ]
          },
          "metadata": {},
          "execution_count": 61
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model_c.fit(df_final, y_final, epochs=10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eslTBpwBuL9l",
        "outputId": "6d0a9070-b3b5-40ea-abff-5485cc6890ff"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/10\n",
            "207/207 [==============================] - 0s 1ms/step - loss: 0.2534 - accuracy: 0.2399\n",
            "Epoch 2/10\n",
            "207/207 [==============================] - 0s 1ms/step - loss: 0.2521 - accuracy: 0.2398\n",
            "Epoch 3/10\n",
            "207/207 [==============================] - 0s 1ms/step - loss: 0.2508 - accuracy: 0.3067\n",
            "Epoch 4/10\n",
            "207/207 [==============================] - 0s 2ms/step - loss: 0.2496 - accuracy: 0.5036\n",
            "Epoch 5/10\n",
            "207/207 [==============================] - 0s 1ms/step - loss: 0.2485 - accuracy: 0.5036\n",
            "Epoch 6/10\n",
            "207/207 [==============================] - 0s 1ms/step - loss: 0.2474 - accuracy: 0.5036\n",
            "Epoch 7/10\n",
            "207/207 [==============================] - 0s 2ms/step - loss: 0.2462 - accuracy: 0.5036\n",
            "Epoch 8/10\n",
            "207/207 [==============================] - 0s 1ms/step - loss: 0.2449 - accuracy: 0.5036\n",
            "Epoch 9/10\n",
            "207/207 [==============================] - 0s 1ms/step - loss: 0.2437 - accuracy: 0.5036\n",
            "Epoch 10/10\n",
            "207/207 [==============================] - 0s 2ms/step - loss: 0.2426 - accuracy: 0.7172\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.callbacks.History at 0x7f25afdf1810>"
            ]
          },
          "metadata": {},
          "execution_count": 62
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model_c.fit(df_final, y_final, epochs=10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eO2ujxOBufzG",
        "outputId": "2b672a0c-2755-4b8d-e6ef-2167c064bc95"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/10\n",
            "207/207 [==============================] - 1s 3ms/step - loss: 0.2414 - accuracy: 0.7840\n",
            "Epoch 2/10\n",
            "207/207 [==============================] - 1s 3ms/step - loss: 0.2404 - accuracy: 0.7860\n",
            "Epoch 3/10\n",
            "207/207 [==============================] - 0s 1ms/step - loss: 0.2393 - accuracy: 0.7869\n",
            "Epoch 4/10\n",
            "207/207 [==============================] - 0s 1ms/step - loss: 0.2383 - accuracy: 0.7870\n",
            "Epoch 5/10\n",
            "207/207 [==============================] - 0s 1ms/step - loss: 0.2374 - accuracy: 0.7866\n",
            "Epoch 6/10\n",
            "207/207 [==============================] - 0s 1ms/step - loss: 0.2364 - accuracy: 0.7878\n",
            "Epoch 7/10\n",
            "207/207 [==============================] - 0s 1ms/step - loss: 0.2355 - accuracy: 0.7884\n",
            "Epoch 8/10\n",
            "207/207 [==============================] - 0s 1ms/step - loss: 0.2347 - accuracy: 0.7878\n",
            "Epoch 9/10\n",
            "207/207 [==============================] - 0s 1ms/step - loss: 0.2339 - accuracy: 0.7873\n",
            "Epoch 10/10\n",
            "207/207 [==============================] - 0s 1ms/step - loss: 0.2330 - accuracy: 0.7881\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.callbacks.History at 0x7f25afe03b10>"
            ]
          },
          "metadata": {},
          "execution_count": 63
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#78.81% accuracy obtained usually a good time to save the model but currently I wont because I already have a model at 79%"
      ],
      "metadata": {
        "id": "TeEJ71V8ujwF"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model_c.fit(df_final, y_final, epochs=5)\n",
        "#trying to see how far the model can go"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ear0KW3nuw8a",
        "outputId": "46e0419b-6ffa-4b00-a596-fd7d8702823c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/5\n",
            "207/207 [==============================] - 0s 1ms/step - loss: 0.2323 - accuracy: 0.7869\n",
            "Epoch 2/5\n",
            "207/207 [==============================] - 0s 1ms/step - loss: 0.2317 - accuracy: 0.7878\n",
            "Epoch 3/5\n",
            "207/207 [==============================] - 0s 1ms/step - loss: 0.2310 - accuracy: 0.7894\n",
            "Epoch 4/5\n",
            "207/207 [==============================] - 0s 1ms/step - loss: 0.2305 - accuracy: 0.7897\n",
            "Epoch 5/5\n",
            "207/207 [==============================] - 0s 1ms/step - loss: 0.2300 - accuracy: 0.7887\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.callbacks.History at 0x7f25b02cc610>"
            ]
          },
          "metadata": {},
          "execution_count": 65
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model_c.fit(df_final, y_final, epochs=10)\n",
        "#a bit more"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eBUDw1lpu3Gq",
        "outputId": "19976cb7-59a8-4bb9-c148-834bd9c0a40b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/10\n",
            "207/207 [==============================] - 0s 2ms/step - loss: 0.2296 - accuracy: 0.7891\n",
            "Epoch 2/10\n",
            "207/207 [==============================] - 0s 1ms/step - loss: 0.2291 - accuracy: 0.7917\n",
            "Epoch 3/10\n",
            "207/207 [==============================] - 0s 1ms/step - loss: 0.2286 - accuracy: 0.7916\n",
            "Epoch 4/10\n",
            "207/207 [==============================] - 0s 1ms/step - loss: 0.2280 - accuracy: 0.7931\n",
            "Epoch 5/10\n",
            "207/207 [==============================] - 0s 1ms/step - loss: 0.2274 - accuracy: 0.7938\n",
            "Epoch 6/10\n",
            "207/207 [==============================] - 0s 1ms/step - loss: 0.2274 - accuracy: 0.7894\n",
            "Epoch 7/10\n",
            "207/207 [==============================] - 0s 1ms/step - loss: 0.2267 - accuracy: 0.7906\n",
            "Epoch 8/10\n",
            "207/207 [==============================] - 0s 1ms/step - loss: 0.2259 - accuracy: 0.7937\n",
            "Epoch 9/10\n",
            "207/207 [==============================] - 0s 2ms/step - loss: 0.2253 - accuracy: 0.7949\n",
            "Epoch 10/10\n",
            "207/207 [==============================] - 0s 1ms/step - loss: 0.2249 - accuracy: 0.7943\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.callbacks.History at 0x7f25afe0e610>"
            ]
          },
          "metadata": {},
          "execution_count": 66
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#can still keep going due to low learning rate and I still believe there is a small scope for improvement\n",
        "model_c.fit(df_final, y_final, epochs=10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "I9LtNQ4Eu-yK",
        "outputId": "d54c33d1-5ecc-42fa-ecae-6748a99e5d92"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/10\n",
            "207/207 [==============================] - 0s 1ms/step - loss: 0.2245 - accuracy: 0.7937\n",
            "Epoch 2/10\n",
            "207/207 [==============================] - 0s 1ms/step - loss: 0.2240 - accuracy: 0.7935\n",
            "Epoch 3/10\n",
            "207/207 [==============================] - 0s 1ms/step - loss: 0.2235 - accuracy: 0.7937\n",
            "Epoch 4/10\n",
            "207/207 [==============================] - 0s 1ms/step - loss: 0.2230 - accuracy: 0.7938\n",
            "Epoch 5/10\n",
            "207/207 [==============================] - 0s 1ms/step - loss: 0.2226 - accuracy: 0.7943\n",
            "Epoch 6/10\n",
            "207/207 [==============================] - 0s 1ms/step - loss: 0.2222 - accuracy: 0.7937\n",
            "Epoch 7/10\n",
            "207/207 [==============================] - 0s 1ms/step - loss: 0.2218 - accuracy: 0.7926\n",
            "Epoch 8/10\n",
            "207/207 [==============================] - 0s 1ms/step - loss: 0.2214 - accuracy: 0.7931\n",
            "Epoch 9/10\n",
            "207/207 [==============================] - 0s 1ms/step - loss: 0.2209 - accuracy: 0.7931\n",
            "Epoch 10/10\n",
            "207/207 [==============================] - 0s 1ms/step - loss: 0.2209 - accuracy: 0.7875\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.callbacks.History at 0x7f25afdf6250>"
            ]
          },
          "metadata": {},
          "execution_count": 67
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#stopping training as the model is now perfectly fit and any more training will cause overfitting"
      ],
      "metadata": {
        "id": "KmcXRCApvMAZ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# The first Model represented by the model variable will be used due to its highest accuracy of 80% amogst all the three models."
      ],
      "metadata": {
        "id": "hCtvBHGo27ON"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Refining Test Set"
      ],
      "metadata": {
        "id": "wZfmN64q9U9-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "testa=pd.read_csv('test.csv')"
      ],
      "metadata": {
        "id": "UNI9T1GE9YaH"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "testa['spend']=testa['RoomService']+testa['FoodCourt']+testa['ShoppingMall']+testa['Spa']+testa['VRDeck']\n",
        "\n",
        "\n",
        "#print(df['Cabin'].str.len())\n",
        "testa['Deck'] = testa['Cabin'].str[0]\n",
        "#df['Num']=df['Cabin'].str[2:df['Cabin'].str.len()-3]\n",
        "\n",
        "testa['CryoSleep']=testa['CryoSleep'].astype('category')\n",
        "testa['VIP']=testa['VIP'].astype('category')\n",
        "\n",
        "testa['SVal']=testa['CryoSleep'].cat.codes\n",
        "testa['VVal']=testa['VIP'].cat.codes\n",
        "\n",
        "abc=pd.get_dummies(testa,columns=['Deck'])\n",
        "\n",
        "test_df=abc[features]"
      ],
      "metadata": {
        "id": "3pVd2C8W9gkb"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "test_df.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Hgv35onsAUNv",
        "outputId": "073d1036-cf01-48c2-b854-61ff31975da3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['Age', 'VVal', 'SVal', 'RoomService', 'ShoppingMall', 'Spa', 'spend',\n",
              "       'VRDeck', 'FoodCourt', 'Deck_A', 'Deck_B', 'Deck_C', 'Deck_D', 'Deck_E',\n",
              "       'Deck_F', 'Deck_G', 'Deck_T', 'spend', 'VRDeck', 'FoodCourt'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 71
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Making Predictions"
      ],
      "metadata": {
        "id": "qtTlkhSC2J33"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "prediction=model.predict(test_df)"
      ],
      "metadata": {
        "id": "lSDAbAwnAbVd"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(prediction)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "A-pCnvorAlrz",
        "outputId": "210b6fad-8239-42bc-e022-58a3f72bedac"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[0.5661427 ]\n",
            " [0.01263386]\n",
            " [0.99065125]\n",
            " ...\n",
            " [       nan]\n",
            " [       nan]\n",
            " [0.49077094]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "predictions_final=[]\n",
        "\n",
        "for i in prediction:\n",
        "  if(i<0.5):\n",
        "    predictions_final.append(False)\n",
        "  else:\n",
        "    predictions_final.append(True)"
      ],
      "metadata": {
        "id": "Tr1syQTiA_Kq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_csv_sub_a=pd.DataFrame({'PassengerId':testa.PassengerId,'Transported':predictions_final})"
      ],
      "metadata": {
        "id": "FQQIFXU3BwQq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_csv_sub_a.to_csv('pred_a.csv', index=False)"
      ],
      "metadata": {
        "id": "4-0Zs-gLCaW0"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
